statement:
   1) Create a BookRental class as mentioned in the diagram and add getter and setter method with constructor.
   2)Create a BookRentalService interface and its implementation class and include CRUD operation rentalId of the create method should be autogenerated.
   3) Create the public static booRentalArray variable with the size of five to store the details.
   4) Create rentBook(BookRental bookRental) , getRentalBookDetails(int customerId)method in the CustomerService and call the createBookRental and getBookRental(int customerId)from BookRentalService which will rent the books and get the rented details of customer;
   5) A customer can avail maximum of two bookings for rent at any point of given time and after any of the books returned customer can avail the books
   
   code:
   import java.util.Date;
class BookRental
{
    private int rentalId;
    private int bookId;
    private int userId;
    private int quantity;
    private Date startDate;
    private Date endDate;
    private double totalAmount;
    private Date returnedDate;
    
    BookRental(){
    }
    
    BookRental(int rentalId, int bookId, int userId, int quantity, Date startDate,Date endDate, double totalAmount, Date returnedDate)
    {
        this.rentalId = rentalId;
        this.bookId = bookId;
        this.userId = userId;
        this.quantity = quantity;
        this.startDate = startDate;
        this.endDate = endDate;
        this.totalAmount = totalAmount;
        this.returnedDate = returnedDate;
    }
   //////// rental id
       public int getRentalId()
    {
        return rentalId;
    }
    
    public void setRentalId(int rentalId)
    {
        this.rentalId = rentalId;
    }
   ///////////// bookid
    public int getBookId()
    {
        return bookId;
    }
    
    public void setBookId(int bookId)
    {
        this.bookId = bookId;
    }
   ////////////////////// userIderid
    public int getUserId()
    {
        return userId;
    }
    
    public void setUserId(int userId)
    {
        this.userId = userId;
    }
 ///////////// quantity   
    public int getQuantity()
    {
        return quantity;
    }
    
    public void setQuantity(int quantity)
    {
        this.quantity = quantity;
    }
///////////////////// start date
  public Date getStartDate()
    {
        return startDate;
    }
    
    public void setStartDate(Date startDate)
    {
        this.startDate = startDate;
    }
////////////////////// end date
  public Date getEndDate()
    {
        return endDate;
    }
    
    public void setEndDate(Date endDate)
    {
        this.endDate = endDate;
    }
////////////////// total amount
 public double getTotalAmount()
    {
        return totalAmount;
    }
    
    public void setTotalAmount(double totalAmount)
    {
        this.totalAmount = totalAmount;
    }
///////////////////
public Date getReturnedDate()
    {
        return returnedDate;
    }
    
    public void setReturnedDate(Date returnedDate)
    {
        this.returnedDate = returnedDate;
    }
    
}
interface BookRentalService
{
void createBookRental(BookRental bookRental);
BookRental updateBookRental(BookRental bookRental);
void deleteBookRental(int rentalId);
BookRental[] getBookRentals();
BookRental[] searchByCustomerId(int customerId);
BookRental[] searchByBookId(int bookId);
}

class BookRentalServiceImpl implements BookRentalService
{
    public static BookRental[]  booRentalArray = new BookRental[5];
    public void createBookRental(BookRental bookRental)
    {
        for(int i=0,j =booRentalArray.length ; i<j ;i++)
        {
            if( booRentalArray[i] == null )
            {
                booRentalArray[i] =bookRental;
                break;
            }
        }
    }
    
    public BookRental updateBookRental(BookRental bookRental)
    {
        int i = 0 ;
        int j =  booRentalArray.length;
        for(; i < j; i++)
        {
            if(  booRentalArray[i].getBookId() == bookRental.getBookId() )
            {
                 booRentalArray[i] = bookRental;
                return bookRental;
            }
        }
        return null;
    }
    
    public void deleteBookRental(int rentalId)
    {
        int i = 0 ;
        int j =  booRentalArray.length;
        for(; i < j; i++)
        {
            if(  booRentalArray[i].getRentalId() == rentalId )
            {
                 booRentalArray[i] = null;
                break;
            }
        }
    }
    
    public BookRental[] getBookRentals(){
        return  booRentalArray;
    }
    
    public BookRental[] searchByCustomerId(int userId)
    {
        int i = 0 ;
        int j =  booRentalArray.length;
        BookRental[] userBookDetails = new BookRental[2];
        int k = 0;
        for(; i < j; i++)
        {
            if(  booRentalArray[i].getUserId() == userId )
            {
                userBookDetails[k++] =  booRentalArray[i];
                if( k == 2 )
                {
                    return userBookDetails;
                }
            }
        }
        return userBookDetails;
    }
    
    public BookRental[] searchByBookId(int bookId)
    {
        int i = 0 ;
        int j =  booRentalArray.length;
        BookRental[] userBookDetails = new BookRental[2];
        int k = 0;
        for(; i < j; i++)
        {
            if(  booRentalArray[i].getBookId() == bookId )
            {
                userBookDetails[k++] =  booRentalArray[i];
                if( k == 2 )
                {
                    return userBookDetails;
                }
            }
        }
        return userBookDetails;
    }
}

interface CustomerService
{
    void createBookRental(BookRental bookRental);
    BookRental[] getRentalBookDetails(int userId);
    
}

class CustomerServiceImpl implements CustomerService
{
    public void createBookRental(BookRental bookRental)
    {
        new BookRentalServiceImpl().createBookRental(bookRental);
    }
    
    public BookRental[] getRentalBookDetails(int userId)
    {
        return new BookRentalServiceImpl().searchByCustomerId( userId );
    }
    
}
